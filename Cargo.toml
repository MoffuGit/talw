[package]
name = "start-axum"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { version = "0.6.4", optional = true, features = ["ws", "macros"] }
console_error_panic_hook = "0.1"
console_log = "1"
cfg-if = "1"
leptos = { version = "0.6", default-features = false, features = [
  "serde",
  "nightly",
] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", default-features = false }
leptos_router = { version = "0.6", default-features = false }
log = "0.4"
simple_logger = "4"
tokio = { version = "1.25.0", optional = true, features = ["full"] }
tower = { version = "0.4.13", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
wasm-bindgen = "=0.2.87"
thiserror = "1.0.38"
tracing = { version = "0.1.37", optional = true }
http = "1"
tower-cookies = "0.10.0"
serde = { version = "1.0.164", features = ["derive"] }
web-sys = { version = "0.3", features = ["HtmlDocument", "Element", "DomRect"] }
sqlx = { version = "0.7", features = [
  "runtime-tokio-rustls",
  "mysql",
  "chrono",
  "uuid",
], optional = true }
axum_session_auth = { version = "0.12.1", features = [
  "mysql-rustls",
], optional = true }
axum_session = { version = "0.12.4", features = [
  "mysql-rustls",
], optional = true }
async-trait = { version = "0.1.68", optional = true }
anyhow = "1.0.71"
bcrypt = { version = "0.15.0", optional = true }
dotenvy = "0.15.7"
futures = "0.3.28"
gloo-net = "0.4.0"
async-broadcast = "0.5.1"
rand = "0.8.5"
serde_json = "1.0.107"
uuid = { version = "1.4.1", features = ["v4", "serde"] }
chrono = { version = "0.4.31", features = ["serde"] }
leptos_icons = { version = "0.3" }
icondata = "0.3.0"
strum = { version = "0.25.0", features = ["derive"] }
strum_macros = "0.25.3"

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
  "dep:axum",
  "dep:async-trait",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:leptos_axum",
  "dep:sqlx",
  "dep:axum_session",
  "dep:axum_session_auth",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:tracing",
  "dep:bcrypt",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tokio", "tower", "tower-http", "leptos_axum"]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "TALW"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
tailwind-input-file = "input.css"
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
